{"version":3,"sources":["serviceWorker.ts","hoc.tsx","layout.tsx","components/icon.tsx","app.tsx","lib/type.ts","lib/schema-validation.ts","validation/schema.tsx","open-api/index.tsx","router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","validationFunc","style","borderTop","borderBottom","boxShadow","menus","link","name","props","header","className","to","map","menu","i","key","Fragment","children","href","jvmTypes","modelParamSchema","Joi","object","keys","string","alphanum","required","column","optional","type","boolean","permissions","array","description","modelSchema","uuid","table","fields","items","unique","a","b","constraints","modelDefSchema","validateModelDef","model","result","validate","abortEarly","undefined","error","errors","console","log","ts","tNames","m","t","p","filter","Types","indexOf","concat","push","checkTypes","JSON","parse","length","status","details","x","message","stringify","path","ValidateComponent","content","validation","WrappedComponent","state","handleSubmit","j","err","isJson","setState","handleChange","target","value","this","renderError","renderSuccess","minWidth","height","placeholder","onChange","onClick","React","Component","NotFound","withRouter","exact","component","Main","ValidateSchema","OpenAPi","history","History","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bd9eb2b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst isJson = (j:string):any => {\n  try {\n    JSON.parse(j)\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport default (validationFunc:any) => (WrappedComponent:any) => class Hoc extends React.Component {\n  state:{content: string, errors: any[] | null, message?:string};\n  constructor (props:any) {\n    super(props);\n\n    this.state = {content: '', errors: null};\n  }\n\n  handleSubmit = () => {\n    const { content } = this.state;\n\n    // 1 check if JSON\n    if (!isJson(content)) {\n      const errors = ['the string you entered is not a JSON string, try again'];\n      this.setState({errors, message: null});\n      return;\n    }\n\n    // 2 check if it is a DDL file\n    const validation = validationFunc(content);\n    console.log(validation)\n    \n    if(validation.errors) {\n      this.setState({errors: validation.errors, message: null});\n      return;\n    }\n\n    // else\n    const errors = null;\n    const message = 'Congratulations, this is a valid file';\n\n    this.setState({errors, message});\n  }\n\n  handleChange = (a:any) => {\n    const content = a.target.value;\n\n    this.setState({content});\n  }\n\n  renderError() {\n    const { errors } = this.state;\n\n    if (!errors) {\n      return null;\n    }\n\n    return (<ul className=\"list-group\">\n      {errors.map((error, i) => {\n        return <li className=\"list-group-item list-group-item-danger\" key={i}>{error}</li>\n      })}\n    </ul>)\n  }\n\n  renderSuccess() {\n    const { message } = this.state;\n    if (!message) {\n      return null;\n    }\n\n    return <p className=\"alert alert-success\">{message}</p>;\n  }\n\n  render() {\n    const {content} = this.state;\n    return (<React.Fragment>\n\n      {this.renderError()}\n      {this.renderSuccess()}\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={this.handleChange}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <button className=\"btn btn-primary\" type=\"submit\" onClick={this.handleSubmit}>Validate</button>\n        </div>\n      </div>\n    </React.Fragment>)\n  }\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nconst title = 'Digis DDL';\n\nconst menus = [ \n {link: '/validate/schema', name: 'Validate Schema'},\n {link: '/openApi', name: 'Open Api Conversion'},\n];\n\nexport default (props:any) => {\n  const header = (<header>\n    <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to={'/'}>{title}</Link></h5>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n    {menus.map((menu,i) => <Link className=\"p-2 text-dark\" key={i} to={menu.link}>{menu.name}</Link>)}\n    </nav>\n  </div>\n  </header>);\n\n  return (<React.Fragment>{header}<div className=\"container\">{props.children}</div></React.Fragment>);\n}","import React from 'react';\n\nexport default (props:any) => {\n  const { name } = props;\n  const className = 'fa fa-' + name;\n  return <i className={className}/>;\n}","import React from 'react';\nimport Icon from './components/icon';\n\nexport default () => (<div className=\"container\">\n  <h1>DDL Checker</h1>\n  <p>Use the menu to explore the different functionalities of the package</p>\n\n  <p><a href=\"https://github.com/Nexysweb/ddl\"><Icon name=\"code\"/> Source</a> under MIT license</p>\n</div>);\n\n","export interface DdEntity {\n  name: string,\n  uuid?: boolean,\n  table?: string,\n  params: DdParams[]\n}\n\nexport interface DdParams {\n  arg: string,\n  column?: string,\n  type: string,\n  optional?: boolean\n}\n\nexport interface DdEntity2 {\n  name: string,\n  uuid?: boolean,\n  table?: string,\n  fields: DdParams2[]\n}\n\nexport interface DdParams2 {\n  name: string,\n  column?: string,\n  type: string,\n  optional?: boolean\n}\n\nexport type OpenApiType = 'boolean' | 'string' | 'integer' | 'number' | 'LocalDateTime' | 'LocalDateTime'\n\nexport interface OpenApiProperty {\n  [k:string]: {type: OpenApiType}\n}\n\nexport interface OpenApiUnit {\n  title: string,\n  type: string,\n  properties: OpenApiProperty,\n  required: string[]\n}\n\nexport interface OpenApiSchema {\n  [k: string]: OpenApiUnit\n}\n\n\n// list of JVM types that are supported\nexport const jvmTypes = ['Int', 'Long', 'Double', 'LocalDateTime', 'LocalDate', 'Boolean', 'BigDecimal', 'String'];\n\nexport const jvmToSqlType = (i:string):string => {\n  switch (i) {\n    case 'Int':\n      return 'INT';\n    case 'Long':\n      return 'BIGINT';\n    case 'Double':\n      return 'FLOAT';\n    //case 'DateTime': // datetime is not accepted\n    case 'LocalDateTime':\n      //return 'TIMESTAMP'; //TODO: Fix ambiguity between timestamp & datetime\n      return 'DATETIME';\n    case 'LocalDate':\n      return 'DATE';\n    case 'Boolean':\n      return 'BIT';\n    case 'BigDecimal':\n      return 'DECIMAL(12,4)';\n    case 'String':\n      return 'VARCHAR(512)'; //TODO: Fix hardcoded length\n    default:\n      console.log(`Couldn't translate \"${i}\" to SQL type, fallback to \\`BIGINT\\`.`);\n      return 'BIGINT';\n  }\n};\n\nexport const sqlToJvmType = (i:string):string => {\n  switch (i.toLowerCase()) {\n    case 'int':\n      return 'Int';\n    case 'bigint':\n      return 'Long';\n    case 'timestamp':\n      return 'LocalDateTime';\n    case 'date':\n      return 'LocalDate';\n    case 'datetime':\n      return 'LocalDateTime';\n    case 'bit':\n      return 'Boolean';\n    case 'decimal':\n      return 'BigDecimal';\n    case 'float':\n      return 'Double';\n    case 'char':\n    case 'text':\n    case 'varchar':\n      return 'String';\n    default:\n      throw new Error(`Couldn't translate \"${i}\" to JVM type.`)\n  }\n};\n\nexport const modelToSqlType = jvmToSqlType;\nexport const modelToJvmType = (x:string):string => x; // Currently equivalent\n\n\n","import Joi from '@hapi/joi';\nimport * as T from './type';\nimport { jvmTypes as Types } from './type';\n\nconst modelParamSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  column: Joi.string().optional(),\n  type: Joi.string().alphanum().required(),\n  optional: Joi.boolean(),\n  permissions: Joi.array().optional(),\n  description: Joi.string().optional()\n});\n\n// for params, the value of `arg` has to be unique\n// https://github.com/hapijs/joi/issues/1159]\nconst modelSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  uuid: Joi.boolean().optional(),\n  table: Joi.string().optional(),\n  description: Joi.string().optional(),\n  fields: Joi.array().items(modelParamSchema).unique((a, b) => a.name === b.name).required(),\n  permissions: Joi.array().optional(),\n  constraints: Joi.array()\n});\n\nconst modelDefSchema = Joi.array().items(modelSchema).required();\n\nconst checkTypes = (model:T.DdEntity2[]) => {\n  console.log(typeof model)\n  let ts:string[] = []\n\n  const tNames:string[] = model.map(m => {\n    const t:string[] = m.fields\n    .map(p => p.type)\n    .filter(p => Types.indexOf(p) < 0);\n\n    ts = ts.concat(t);\n\n    return m.name\n  });\n\n  const errors:string[] = [];\n\n  ts.map(t => {\n    if (tNames.indexOf(t) < 0) {\n      errors.push(`\"${t}\" is referenced as a type in params but was never defined`)\n    }\n    return true;\n  });\n\n  return errors;\n}\n\n/**\n * validates a model of the JSON ddl\n */\nconst validateModelDef = (model:string):{status: boolean, errors: string[] | null} => {\n  const schema = modelDefSchema;\n\n  const result = schema.validate(model, { abortEarly: false });\n\n  if (result.error === undefined || result.error === null) {\n    // here check if types all exist\n    const jModel:T.DdEntity2[] = JSON.parse(model)\n    const errors = checkTypes(jModel);\n\n    if (errors.length > 0) {\n      return {status: false, errors};\n    } else {\n      return {status: true, errors: null};\n    }\n  } else {\n    const errors:string[] = result.error.details.map(x => x.message + ' ' + JSON.stringify(x.path));\n\n    return {status: false, errors};\n  }\n}\n\nexport { validateModelDef };\n","import React from 'react'\n\nimport { validateModelDef } from '../lib/schema-validation';\n\nimport wrapComponent from '../hoc';\n\nconst validateSchema = (content:string) => {\n  const validation = validateModelDef(content)\n\n  if(validation && !validation.status && validation.errors) {\n    const errors = ['the string you entered is not a properly formatted DDL file, try again'].concat(validation.errors.map(x => {\n      return x;\n    })\n    );\n\n    return {errors};\n  }\n\n  return validation;\n}\n\nconst ValidateComponent = wrapComponent(validateSchema)(() => {});\n\nexport default () => (<div className=\"container\">\n  <h2>Schema Validation</h2>\n  <ValidateComponent/>\n</div>);\n\n","import React from 'react'\n\nexport default () => (<div className=\"container\">\n  <h2>Open Api V3</h2>\n  <p>Based on <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md\">OpenAPI Specification</a></p>\n\n  <p><b>TODO</b></p>\n</div>);\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from 'react-router-dom';\n\nimport Layout from './layout';\n\nimport Main from './app';\nimport ValidateSchema from './validation/schema';\nimport OpenAPi from './open-api';\n\nconst NotFound = () => <p>Page Not Found</p>;\n\nfunction Router(props:any) {\n  return (<Layout>\n    <Switch>\n      <Route exact path={'/'} component={Main} />\n      <Route exact path={'/validate/schema'} component={ValidateSchema}/>\n      <Route exact path={'/openApi'} component={OpenAPi}/>\n      <Route path=\"/\" component={NotFound} />\n    </Switch>\n  </Layout>);\n}\n\nexport default withRouter(Router);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n\n\nimport { Router } from 'react-router-dom';\nimport * as History from 'history';\n\nimport RouterApp from './router';\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nReactDOM.render(<Router history={history}><RouterApp/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}