{"version":3,"sources":["serviceWorker.ts","utils.ts","components/icon.tsx","layout.tsx","app.tsx","lib/type.ts","lib/schema-validation.ts","validation/layout.tsx","lib/query/query-to-type.data.ts","validation/schema.tsx","open-api/index.tsx","components/textarea.tsx","components/code.tsx","components/error.tsx","components/layout.tsx","lib/utils.data.ts","lib/utils.ts","lib/joi-utils.ts","model-to-ts/index.tsx","model-to-ts/utils.ts","lib/query/query-to-type.ts","query-to-ts/utils.ts","query-to-ts/index.tsx","model-to-ts/joi.tsx","lib/query/fake.ts","fake-data/index.tsx","router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","isJson","j","JSON","parse","err","ghUrl","props","className","name","style","borderTop","borderBottom","boxShadow","menus","link","header","to","href","map","menu","i","key","children","jvmTypes","modelParamSchema","Joi","object","keys","string","alphanum","required","column","optional","type","boolean","permissions","array","description","modelSchema","uuid","table","fields","items","unique","a","b","constraints","modelDefSchema","validateModelDef","model","result","validate","abortEarly","undefined","error","errors","ts","tNames","m","t","p","filter","Types","concat","indexOf","push","checkTypes","value","length","status","details","x","message","stringify","path","validationFunc","valueDefault","React","useState","content","setContent","setErrors","setMessage","minWidth","height","placeholder","onChange","target","onClick","validation","console","log","validateSchema","v","display","whiteSpace","LeftRight","title","left","right","companyDef","types","generateInterface","def","id","fs","f","optOut","typeOut","includes","mapTypeToTs","fieldsTs","join","generateInterfaces","defs","u","getTypeString","typeName","warn","appendOptionalString","schemaTextFromDd","dd","optouts","r","line","output","setOutput","setError","o","Array","isArray","entities","getOutput","_err","projectionToType","entity","projection","projKeys","Object","listRef","k","obj","entityChild","parentEntity","field","pe","find","Error","findEntity","ent","listPick","listOmissions","paramsToType","references","rt","refTypes","query","q","QT","querySample","address","DataSample","setModel","setQuery","getJoiSchema","Math","random","toString","substring","Date","now","characters","charactersLength","charAt","floor","makeRandomString","integer","round","float","date","newTime","nYears","any","rowDef","isUuid","forEach","FakeData","sampleRow","n","setN","w","Number","fill","_x","NotFound","withRouter","exact","component","Main","ValidateSchema","OpenAPi","toTS","queryToTS","toJoi","history","History","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fccec5fa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const isJson = (j:string):any => {\n  try {\n    JSON.parse(j)\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport const ghUrl = 'https://github.com/Nexysweb/ddl';\n","import React from 'react';\n\nexport default (props:any) => {\n  const { name } = props;\n  const className = 'fa fa-' + name;\n  return <i className={className}/>;\n}","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { ghUrl } from './utils';\nimport Icon from './components/icon';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nconst title = 'Nexys DDL';\n\nconst menus = [ \n {link: '/validate/schema', name: 'Validate Schema'},\n {link: '/openApi', name: 'Open Api Conversion'},\n {link: '/toTS', name: 'Model to TypeScript'},\n {link: '/queryToTS', name: 'Query to TypeScript'},\n {link: '/fake-data', name: 'Fake Data'}\n];\n\nexport default (props:any) => {\n  const header = (<header>\n    <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to={'/'}>{title}</Link> <small><a href={ghUrl}><Icon name=\"code\"/></a></small></h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        {menus.map((menu,i) => <Link className=\"p-2 text-dark\" key={i} to={menu.link}>{menu.name}</Link>)}\n      </nav>\n    </div>\n  </header>);\n\n  return (<>{header}<div className=\"container\">{props.children}</div></>);\n}","import React from 'react';\nimport Icon from './components/icon';\nimport { ghUrl } from './utils';\n\nexport default () => (<div className=\"container\">\n  <h1>Nexys Data Defintion Language</h1>\n  <p>Use the menu to explore the different functionalities of the package</p>\n\n  <p><a href={ghUrl}><Icon name=\"code\"/> Source</a> under MIT license</p>\n</div>);\n\n","export interface DdEntity2 {\n  name: string,\n  uuid?: boolean,\n  table?: string,\n  fields: DdParams2[]\n}\n\nexport interface DdParams2 {\n  name: string,\n  column?: string,\n  type: string,\n  optional?: boolean\n}\n\n// old interface - deprecated\nexport interface DdEntity {\n  name: string,\n  uuid?: boolean,\n  table?: string,\n  params: DdParams[]\n}\n\nexport interface DdParams {\n  arg: string,\n  column?: string,\n  type: string,\n  optional?: boolean\n}\n// end old\n\nexport type DllType =     'Boolean' | 'String' | 'Int' | 'Long'   | 'Double' | 'BigDecimal'  | 'LocalDateTime' | 'LocalDate'\nexport type OpenApiType = 'boolean' | 'string' | 'integer'        | 'number'                 | 'LocalDateTime' | 'LocalDate'\n\nexport interface OpenApiProperty {\n  [k:string]: {type: OpenApiType}\n}\n\nexport interface OpenApiUnit {\n  title: string,\n  type: string,\n  properties: OpenApiProperty,\n  required: string[]\n}\n\nexport interface OpenApiSchema {\n  [k: string]: OpenApiUnit\n}\n\n\n// list of JVM types that are supported\nexport const jvmTypes:DllType[] = ['Int', 'Long', 'Double', 'LocalDateTime', 'LocalDate', 'Boolean', 'BigDecimal', 'String'];\n\nexport const jvmToSqlType = (i:DllType):string => {\n  switch (i) {\n    case 'Int':\n      return 'INT';\n    case 'Long':\n      return 'BIGINT';\n    case 'Double':\n      return 'FLOAT';\n    //case 'DateTime': // datetime is not accepted\n    case 'LocalDateTime':\n      //return 'TIMESTAMP'; //TODO: Fix ambiguity between timestamp & datetime\n      return 'DATETIME';\n    case 'LocalDate':\n      return 'DATE';\n    case 'Boolean':\n      return 'BIT';\n    case 'BigDecimal':\n      return 'DECIMAL(12,4)';\n    case 'String':\n      return 'VARCHAR(512)'; //TODO: Fix hardcoded length\n    default:\n      console.log(`Couldn't translate \"${i}\" to SQL type, fallback to \\`BIGINT\\`.`);\n      return 'BIGINT';\n  }\n};\n\nexport const sqlToJvmType = (i:string):DllType => {\n  switch (i.toLowerCase()) {\n    case 'int':\n      return 'Int';\n    case 'bigint':\n      return 'Long';\n    case 'timestamp':\n      return 'LocalDateTime';\n    case 'date':\n      return 'LocalDate';\n    case 'datetime':\n      return 'LocalDateTime';\n    case 'bit':\n      return 'Boolean';\n    case 'decimal':\n      return 'BigDecimal';\n    case 'float':\n      return 'Double';\n    case 'char':\n    case 'text':\n    case 'varchar':\n      return 'String';\n    default:\n      throw new Error(`Couldn't translate \"${i}\" to JVM type.`)\n  }\n};\n\nexport const modelToSqlType = jvmToSqlType;\nexport const modelToJvmType = (x:DllType):DllType => x; // Currently equivalent\n","import Joi from '@hapi/joi';\nimport * as T from './type';\nimport { jvmTypes as Types } from './type';\n\nconst modelParamSchema:Joi.ObjectSchema<T.DdParams2> = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  column: Joi.string().optional(),\n  type: Joi.string().alphanum().required(),\n  optional: Joi.boolean(),\n  permissions: Joi.array().optional(),\n  description: Joi.string().optional()\n});\n\n// for params, the value of `arg` has to be unique\n// https://github.com/hapijs/joi/issues/1159]\nconst modelSchema:Joi.ObjectSchema<T.DdEntity2> = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  uuid: Joi.boolean().optional(),\n  table: Joi.string().optional(),\n  description: Joi.string().optional(),\n  fields: Joi.array().items(modelParamSchema).unique((a, b) => a.name === b.name).required(),\n  permissions: Joi.array().optional(),\n  constraints: Joi.array()\n});\n\nconst modelDefSchema:Joi.ArraySchema = Joi.array().items(modelSchema).required();\n\nconst checkTypes = (model:T.DdEntity2[]) => {\n  let ts:string[] = []\n\n  const tNames:string[] = model.map(m => {\n    const t:string[] = m.fields\n    .map(p => p.type)\n    .filter(p => p in Types);\n\n    ts = ts.concat(t);\n\n    return m.name\n  });\n\n  const errors:string[] = [];\n\n  ts.map(t => {\n    if (tNames.indexOf(t) < 0) {\n      errors.push(`\"${t}\" is referenced as a type in params but was never defined`)\n    }\n    return true;\n  });\n\n  return errors;\n}\n\n/**\n * validates a model of the JSON ddl\n */\nconst validateModelDef = (model:object):{status: boolean, errors: string[] | null} => {\n  const result = modelDefSchema.validate(model, { abortEarly: false });\n\n  if (result.error === undefined || result.error === null) {\n    // here check if types all exist\n    const jModel:T.DdEntity2[] = result.value\n    const errors = checkTypes(jModel);\n\n    if (errors.length > 0) {\n      return {status: false, errors};\n    } else {\n      return {status: true, errors: null};\n    }\n  } else {\n    const errors:string[] = result.error.details.map(x => x.message + ' ' + JSON.stringify(x.path));\n\n    return {status: false, errors};\n  }\n}\n\nexport { validateModelDef };\n","import React from 'react';\n\nimport { isJson } from '../utils'\n\nexport default (props:{valueDefault?: string, validationFunc:(x: string) => {errors?: any}|any}) => {\n  const { validationFunc, valueDefault = '' } = props;\n  const [ content, setContent] = React.useState(valueDefault);\n  const [ errors, setErrors ] = React.useState<string[] | null>(null);\n  const [ message, setMessage ] = React.useState<string | null>(null);\n\n  const handleSubmit = () => {\n  \n    // 1 check if JSON\n    if (!isJson(content)) {\n      const errors = ['the string you entered is not a JSON string, try again'];\n      \n      setErrors(errors);\n      setMessage(null)\n      return;\n    }\n\n    // 2 check if it is a DDL file\n    const validation = validationFunc(content);\n    console.log(validation)\n    \n    if(validation.errors) {\n      //this.setState({errors: validation.errors, message: null});\n      setErrors(validation.errors);\n      setMessage(null);\n      return;\n    }\n\n    // else\n    const errors = null;\n    const message = 'Congratulations, this is a valid file';\n\n    //this.setState({errors, message});\n    setErrors(errors);\n    setMessage(message);\n  }\n\n  const handleChange = (a:React.ChangeEvent<HTMLTextAreaElement>) => {\n    const content:string = a.target.value;\n\n    setContent(content);\n  }\n\n  const renderError = () => {\n    if (!errors) {\n      return null;\n    }\n\n    return (<ul className=\"list-group\">\n      {errors.map((error, i) => {\n        return <li className=\"list-group-item list-group-item-danger\" key={i}>{error}</li>\n      })}\n    </ul>)\n  }\n\n  const renderSuccess = () => {\n    if (!message) {\n      return null;\n    }\n\n    return <p className=\"alert alert-success\">{message}</p>;\n  }\n\n  return (<>\n    {renderError()}\n    {renderSuccess()}\n\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={handleChange}/>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <button className=\"btn btn-primary\" type=\"submit\" onClick={handleSubmit}>Validate</button>\n      </div>\n    </div>\n  </>)\n}\n","import * as TS from '../type';\n\nexport const entityName1 = 'MyEntity'\nexport const entityName2 = 'EntityName2'\n\nexport const m1:TS.DdEntity2 = {\n  name: entityName1,\n  fields: [\n    {name: 'f1', type: 'String'},\n    {name: 'f2', type: 'Int'},\n    {name: 'f3', type: 'Boolean', optional: true},\n    {name: 'status', type: entityName2, optional: true}\n  ]\n}\n\nexport const m2:TS.DdEntity2 = {\n  name: entityName2,\n  fields: [\n    {name: 'name', type: 'String'}\n  ]\n}\n\nexport const model:TS.DdEntity2[] = [m1, m2]","import React from 'react'\n\nimport { validateModelDef } from '../lib/schema-validation';\n\nimport ValidateComponent from './layout';\n\nimport { model } from '../lib/query/query-to-type.data'\n\nconst validateSchema = (content:string):{errors?: string[]} | any => {\n  const validation = validateModelDef(JSON.parse(content))\n\n  if(validation && !validation.status && validation.errors) {\n    const errors = ['the string you entered is not a properly formatted DDL file, try again'].concat(validation.errors.map(x => {\n      return x;\n    }));\n\n    return { errors };\n  }\n\n  return validation;\n}\n\nexport default () => (<div className=\"container\">\n  <h2>Schema Validation</h2>\n  <ValidateComponent valueDefault={JSON.stringify(model, null, 2)} validationFunc={validateSchema}/>\n</div>);\n","import React from 'react'\n\nexport default () => (<div className=\"container\">\n  <h2>Open Api V3</h2>\n  <p>Based on <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md\">OpenAPI Specification</a></p>\n\n  <p><b>TODO</b></p>\n</div>);\n","import React from 'react';\n\ninterface Props {\n  content:string,\n  onChange: (x:string)=>void\n}\n\nexport default (props:Props) => {\n  const handleChange = (x:React.ChangeEvent<HTMLTextAreaElement>) => {\n    const v:string = x.target.value\n    props.onChange(v)\n  }\n\nreturn <textarea\n  className=\"form-control\"\n  style={{minWidth: '100%', height: '400px'}}\n  placeholder={'insert your json here'}\n  value={props.content}\n  onChange={handleChange}\n  />\n}","import React from 'react';\n\nconst style:React.CSSProperties = {\n  display: 'block',\n  whiteSpace: 'pre-wrap'\n}\n\nexport default (props:{value:string}) => {\n  return <code style={style}>\n    {props.value}\n  </code>\n}","import React from 'react';\n\nexport default (props:{message: string}) => <p className=\"alert alert-danger\">{props.message}</p>;","import React from 'react';\n\nexport const LeftRight = (props:({title: string, left:any, right:any})) => {\n  return <div className=\"container\">\n    <h2>{props.title}</h2>\n\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n      {props.left}\n      </div>\n      <div className=\"col-md-6\">\n        {props.right}\n      </div>\n    </div>\n  </div>\n}\n","\nimport * as I from './utils';\n\nexport const companyInterface = `export interface Company {\n  id: number,\n  logDateAdded: Date,\n  country?: {id: number} | Country,\n  wwId?: string,\n  name: string,\n  status: {id: number} | CompanyStatus,\n  type: number,\n  logUser?: {id: number} | User,\n  ceId: string\n}`;\n\nexport const companyDef:I.DataDef = {\n  \"name\": \"Company\",\n  \"uuid\": false,\n  \"fields\": [\n      {\n          \"type\": \"LocalDateTime\",\n          \"name\": \"logDateAdded\",\n          \"optional\": false\n      },\n      {\n          \"type\": \"Country\",\n          \"name\": \"country\",\n          \"column\": \"country_id\",\n          \"optional\": true\n      },\n      {\n          \"type\": \"String\",\n          \"name\": \"wwId\",\n          \"optional\": true\n      },\n      {\n          \"type\": \"String\",\n          \"name\": \"name\",\n          \"optional\": false\n      },\n      {\n          \"type\": \"CompanyStatus\",\n          \"name\": \"status\",\n          \"column\": \"status_id\",\n          \"optional\": false\n      },\n      {\n          \"type\": \"Int\",\n          \"name\": \"type\",\n          \"column\": \"type_id\",\n          \"optional\": false\n      },\n      {\n          \"type\": \"User\",\n          \"name\": \"logUser\",\n          \"column\": \"log_user_id\",\n          \"optional\": true\n      },\n      {\n          \"type\": \"String\",\n          \"name\": \"ceId\",\n          \"optional\": false\n      }\n  ]\n}\n\n","\nconst types = ['LocalDateTime', 'LocalDate', 'String', 'Int', 'BigDecimal', 'Double', 'Boolean'];\n\nexport const mapTypeToTs = (t:string) => {\n  if (types.includes(t)) {\n    switch (t) {\n      case 'LocalDateTime':\n      case 'LocalDate':\n        return 'Date';\n      case 'Int':\n      case 'BigDecimal':\n      case 'Double':\n        return 'number';\n      case 'Boolean':\n        return 'boolean';\n      default:\n        return 'string';\n    }\n  }\n\n  return `{id: number} | ${t}`;\n}\n\nexport interface DataDefField {\n  type: string,\n  name: string,\n  optional: boolean,\n  column?: string\n}\n\nexport interface DataDef {\n  name: string,\n  uuid: boolean,\n  fields: DataDefField[]\n}\n\nexport const generateInterface = (def: DataDef):string => {\n  const { name, uuid: isUUid, fields } = def;\n  const id:string= isUUid ? 'uuid: string' : 'id: number';\n\n  const fs:string[] = fields.map(f => {\n    const name = f.name;\n    const optOut = f.optional ? '?' : '';\n    const typeOut = mapTypeToTs(f.type);\n\n    return `${name}${optOut}: ${typeOut}`\n  })\n\n  const fieldsTs:string = [id].concat(fs).join(',\\n  ');\n\n  return `export interface ${name} {\n  ${fieldsTs}\n}`\n}\n\nexport const generateInterfaces = (defs: DataDef[]):string => defs.map(u => generateInterface(u)).join('\\n\\n');","import Joi from '@hapi/joi';\nimport * as T from './type';\nimport {JoiOut} from './joi-type';\n\n\nexport const getType = (typeName:string):JoiOut => {\n  switch(typeName) {\n    case 'String':\n      return Joi.string();\n    case 'Boolean':\n      return Joi.boolean();\n    case 'Int':\n    case 'BigDecimal':\n    case 'Double':\n      return Joi.number();\n    case 'LocalDateTime':\n      return Joi.date();\n    case 'LocalDate':\n      return Joi.string();\n    default:\n      console.warn(`The type \"${typeName}\" could not be converted to Joi, this may create some errors`);\n      return Joi.string();\n  }\n}\n\nexport const getTypeString = (typeName:string):string => {\n  switch(typeName) {\n    case 'String':\n      return 'Joi.string()';\n    case 'Boolean':\n      return 'Joi.boolean()';\n    case 'Int':\n    case 'BigDecimal':\n    case 'Double':\n      return 'Joi.number()';\n    case 'LocalDateTime':\n      return 'Joi.date()';\n    case 'LocalDate':\n      return 'Joi.string()';\n    default:\n      console.warn(`The type \"${typeName}\" could not be converted to Joi, this may create some errors`);\n      return 'Joi.string()';\n  }\n}\n\nexport const appendOptional = (j:JoiOut, optional:boolean = false):JoiOut => {\n  if (!optional) {\n    return j.required();\n  }\n\n  return j;\n}\n\nexport const appendOptionalString = (j:string, optional:boolean = false):string => {\n  if (!optional) {\n    return j + '.required()';\n  }\n\n  return j;\n}\n\n/**\n * [description]\n * @param  {[type]} dd      [description]\n * @param  {Array}  optouts list of arguments that need to be ignored (e.g. logdateadeed)\n * @return {[type]}         [description]\n */\nexport const schemaFromDd = (dd:T.DdParams[], optouts:string[] = []):{[name:string]:JoiOut} => {\n  const r:{[name:string]:JoiOut} = {};\n\n  dd.map(line => {\n    const name:string = line.arg;\n\n    if (!optouts.includes(name)) {\n      r[name] = appendOptional(getType(line.type), line.optional);\n    }\n\n    return null;\n  });\n\n  return r;\n}\n\nexport const schemaTextFromDd = (dd:T.DdParams2[], optouts:string[] = []):string => {\n  \n\n  const r = dd.filter(x => !optouts.includes(x.name) ).map(line => {\n    return '  ' + line.name + ': ' + appendOptionalString(getTypeString(line.type), line.optional);\n  }).join(',\\n');\n\n  return 'Joi.Object({\\n' + r + '\\n});'\n}","import React, { useState } from 'react'\n\nimport { Textarea, Error, Code, Layout } from '../components';\nimport { isJson }  from '../utils';\nimport { companyDef } from '../lib/utils.data';\nimport { getOutput } from  './utils';\n\nexport default () => {\n  const [ content, setContent] = useState<string>(JSON.stringify(companyDef, null, 2));\n  const [ output, setOutput ] = useState<string | null>(null)\n  const [ error, setError] = useState<string | null>(null);\n\n  const handleChange = (t:string) => {\n    setContent(t);\n\n    if(!isJson(t)) {\n      setError('no json')\n    } else {\n      setError(null)\n    }\n  }\n\n  const convert = () => {\n    try {\n      const o = getOutput(content);\n      setOutput(o);\n    } catch (_err) {\n      setError('can\\'t convert')\n    }\n  }\n\n  const left = <>\n    {error && <Error message={error}/>}\n    <Textarea content={content} onChange={handleChange}/>\n    <button className=\"btn btn-primary\" type=\"button\" onClick={convert}>Convert!</button>\n    &nbsp;\n    <button className=\"btn btn-secondary\" type=\"button\" onClick={() => setContent('[]')}>Reset</button>\n  </>\n\n  const right = output && <Code value={output}/>\n\n  return <Layout.LeftRight title={'Schema to Typescript'} left={left} right={right}/>;\n};\n","import { generateInterface, DataDef, generateInterfaces } from '../lib/utils';\nimport { schemaTextFromDd } from '../lib/joi-utils'\nimport { DdParams2 } from '../lib/type';\n\nexport const getOutput = (content: string):string => {\n  const j = JSON.parse(content)\n  const isArray = Array.isArray(j);\n\n  if (isArray) {\n    return generateInterfaces(j as DataDef[]);\n  } else {\n    if(j.entities) {\n      return generateInterfaces(j.entities as DataDef[]);\n    } else {\n      return generateInterface(j as DataDef);\n    }\n  }\n}\n\nexport const getJoiSchema = (content: string):string => {\n  const j = JSON.parse(content)\n\n\n  return schemaTextFromDd(j as DdParams2[]);\n}","// utility to get the output type from a query inferred from the query\nimport {Projection, Query, References} from './type';\nimport * as T from '../type';\n\n// todo: check that fields in the query are actually aligned with the model\n\nexport const findEntity = (parentEntity: string, field: string, model: T.DdEntity2[]):string => {\n  const pe = model.find(x => x.name === parentEntity);\n\n  if (!pe) {\n    throw Error('parent entity cannot be found');\n  }\n\n  const f =  pe.fields.find(x => x.name === field);\n\n  if (!f) {\n    throw Error('field cannot be found');\n  }\n\n  return f.type\n}\n\nexport const projectionToType = (entity: string, projection: Projection, model: T.DdEntity2[]):string => {\n  const projKeys = Object.keys(projection);\n\n  const listRef:string[] = projKeys.filter(k => {\n    const v = projection[k];\n    return typeof v === 'object';\n  })\n  .map(k => {\n    const obj = projection[k];\n    const entityChild = findEntity(entity, k, model);\n    const ent = projectionToType(entityChild, obj as Projection, model)\n\n    return ` & {${k}: ${ent}}`\n  })\n\n  const listPick = projKeys.filter(k => {\n    const v = projection[k];\n    return v === true;\n  })\n\n  if (listPick.length > 0) {\n    return `Pick<${entity}, ${listPick.map(x => `'${x}'`).join(' | ')}>`\n  }\n  \n  const listOmissions = projKeys.filter(k => {\n    const v = projection[k];\n    return v === false;\n  })\n\n  if (listOmissions.length > 0) {\n    return `Omit<${entity}, ${listOmissions.map(x => `'${x}'`).join(' | ')}>`\n  }\n\n  return entity + listRef.join('')\n}\n\nexport const paramsToType = (entity: string, projection: Projection, references: References, model: T.DdEntity2[]):string => {\n  const rt = refTypes(references, model)\n  return '(' + projectionToType(entity, projection, model) + rt + ')[]'\n}\n\nexport const refTypes = (references:References, model: T.DdEntity2[]):string => {\n  const refTypes = Object.keys(references).map(entity => {\n    const projection:Projection = references[entity].projection || {};\n    const p = paramsToType(entity, projection, {}, model); // here reference does not exist => {}\n    return ` & {${entity}: ${p}}`\n  });\n\n  if (refTypes.length === 0) {\n    return '';\n  }\n\n  return refTypes.join('')\n}\n\nexport const queryToType = (q:Query, model: T.DdEntity2[]):string => {\n const r = Object.keys(q).map(entity => {\n    const projection:Projection = q[entity].projection || {};\n    const references:References = q[entity].references || {};\n    const p = paramsToType(entity, projection, references, model);\n\n    return `${entity}: ${p}`\n  }).join(', ');\n\n  return `{${r}}`\n}","import * as QT from '../lib/query/query-to-type';\nimport { schemaTextFromDd } from '../lib/joi-utils'\nimport { DdParams2 } from '../lib/type';\n\nexport const getOutput = (query: string, model: string):string => {\n  const jQuery = JSON.parse(query)\n  const jModel = JSON.parse(model)\n  \n\n  return QT.queryToType(jQuery, jModel)\n}\n\nexport const getJoiSchema = (content: string):string => {\n  const j = JSON.parse(content)\n\n\n  return schemaTextFromDd(j as DdParams2[]);\n}","import React, { useState } from 'react'\n\nimport { Textarea, Error, Code, Layout } from '../components';\nimport { isJson }  from '../utils';\nimport { getOutput } from  './utils';\nimport * as DataSample from '../lib/query/query-to-type.data'\n\nconst querySample = {\n  [DataSample.entityName1]: {projection:{status: {name: true, address: true}}},\n  [DataSample.entityName2]: {}\n}\n\nexport default () => {\n  const [ model, setModel] = useState<string>(JSON.stringify(DataSample.model, null, 2));\n  const [ query, setQuery] = useState<string>(JSON.stringify(querySample, null, 2));\n  const [ output, setOutput ] = useState<string | null>(null)\n  const [ error, setError] = useState<string | null>(null);\n\n  const handleChange = (t:string) => {\n    setModel(t);\n\n    if(!isJson(t)) {\n      setError('no json')\n    } else {\n      setError(null)\n    }\n  }\n\n  const handleQueryChange = (t:string) => {\n    setQuery(t);\n\n    if(!isJson(t)) {\n      setError('no json')\n    } else {\n      setError(null)\n    }\n  }\n\n  const convert = () => {\n    try {\n      const o = getOutput(query, model);\n      setOutput(o);\n    } catch (_err) {\n      setError('can\\'t convert')\n    }\n  }\n\n  const handleReset = () => {\n    setModel('[]');\n    setQuery('[]')\n  }\n\n  const left = <>\n    {error && <Error message={error}/>}\n    <h4>Query</h4>\n    <Textarea content={query} onChange={handleQueryChange}/>\n    <h4>Model</h4>\n    <Textarea content={model} onChange={handleChange}/>\n    <button className=\"btn btn-primary\" type=\"button\" onClick={convert}>Get output TypeScript type!</button>\n    &nbsp;\n    <button className=\"btn btn-secondary\" type=\"button\" onClick={handleReset}>Reset</button>\n  </>\n\n  const right = output && <Code value={output}/>\n\n  return <Layout.LeftRight title={'Schema to Typescript'} left={left} right={right}/>;\n};\n","import React, { useState } from 'react'\n\nimport { Textarea, Error, Code, Layout } from '../components';\nimport { isJson }  from '../utils';\nimport { companyDef } from '../lib/utils.data';\nimport { getJoiSchema } from  './utils';\n\nexport default () => {\n  const [ content, setContent] = useState<string>(JSON.stringify(companyDef.fields, null, 2));\n  const [ output, setOutput ] = useState<string | null>(null)\n  const [ error, setError] = useState<string | null>(null);\n\n  const handleChange = (t:string) => {\n    setContent(t);\n\n    if(!isJson(t)) {\n      setError('no json')\n    } else {\n      setError(null)\n    }\n  }\n\n  const convert = () => {\n    try {\n      const o = getJoiSchema(content);\n      setOutput(o);\n    } catch (_err) {\n      setError('can\\'t convert')\n    }\n  }\n\n  const left = <>\n    {error && <Error message={error}/>}\n    <Textarea content={content} onChange={handleChange}/>\n    <button className=\"btn btn-primary\" type=\"button\" onClick={convert}>Convert!</button>\n    &nbsp;\n    <button className=\"btn btn-secondary\" type=\"button\" onClick={() => setContent('[]')}>Reset</button>\n  </>\n\n  const right = output && <Code value={output}/>\n\n  return <Layout.LeftRight title={'Schema to Joi'} left={left} right={right}/>;\n};\n","import * as T from '../type';\n\nconst makeRandomString = (length:number) => {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n\n  for ( var i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n\n/**\n * see https://stackoverflow.com/questions/105034/how-to-create-guid-uuid\n */\nexport const uuid = () => Math.random().toString(36).substring(2) + Date.now().toString(36);\n\nexport const string = ():string => {\n  return makeRandomString(12) //'fake';\n}\n\nexport const integer = ():number => {\n  return Math.round(float());\n}\n\nexport const float = ():number => {\n  return 100*Math.random();\n}\n\nexport const boolean = ():boolean => {\n  return Boolean(Math.round(Math.random()));\n}\n\nexport const date = ():Date => {\n  //3,156,192\n  const lowerBound = 1420070400000 // new Date('2015-01-01').getTime();\n  //const upperBound = 1735689600000 // new Date('2025-01-01').getTime();\n  const nYears = 10;\n  const delta = nYears * 365.75 * 3600 * 1000 // add 10 years\n  const newTime = delta * Math.random() + lowerBound;\n  const d = new Date(newTime);\n  return d;\n}\n\nexport const any = (type:string, optional: boolean = false):any | null => {\n  if (optional && boolean()) {\n    return undefined;\n  }\n\n  switch (type) {\n    case 'Int':\n      return integer();\n    case 'Float':\n      return float();\n    case 'Boolean':\n      return boolean();\n    case 'LocalDateTime':\n      return date();\n    default:\n      return string();\n  }\n}\n\nexport const row = (rowDef: T.DdParams2[], isUuid: boolean = false):{[k:string]: any} => {\n  const o:{[k:string]: any} = {id: integer()};\n\n  if(isUuid) {\n    o['uuid'] = uuid();\n  } else {\n    o['id'] = integer();\n  }\n\n  rowDef.forEach(r => {\n    const a = any(r.type, r.optional);\n    if (a !== undefined) {\n      o[r.name] = a;\n    }\n  });\n\n  return o;\n}\n\n","import React, { useState } from 'react'\n\nimport { Textarea, Error, Code, Layout } from '../components';\nimport { isJson }  from '../utils';\nimport * as FakeData from '../lib/query/fake';\nimport { DdParams2 } from '../lib/type';\n\nconst getOutput = (x:string):{ [k: string]: any; } => {\n  try {\n    const jModel = JSON.parse(x) as DdParams2[]\n    return FakeData.row(jModel);\n  } catch (err) {\n    throw Error({message:'model could not be interpreted'})\n  }\n}\n\nconst sampleRow:DdParams2[] = [\n  { name: 'f1', type: \"String\" },\n  { name: 'f2', type: 'Int' },\n  { name: 'f3', type: 'Boolean', optional: true },\n  { name: 'f4', type: 'Float', optional: true }\n]\n\nexport default () => {\n  const [ model, setModel] = useState<string>(JSON.stringify(sampleRow, null, 2));\n  const [ output, setOutput ] = useState<string | null>(null)\n  const [ error, setError] = useState<string | null>(null);\n  const [ n, setN ] = useState<number>(1);\n\n  const handleChange = (t:string) => {\n    setModel(t);\n\n    if(!isJson(t)) {\n      setError('no json')\n    } else {\n      setError(null)\n    }\n  }\n\n  const handleChangeN = (x:React.ChangeEvent<HTMLInputElement>) => {\n    const w:string = (x.target.value)\n    console.log(w)\n    const v = Number(w);\n    if (v > 0) {\n      setN(v);\n    }\n  }\n\n  const convert = () => {\n    try {\n      const o = new Array(n).fill(null).map(_x => {\n        return getOutput(model);\n      })\n      \n      setOutput(JSON.stringify(o, null, 2));\n    } catch (_err) {\n      console.log(_err)\n      setError(`can't convert`)\n    }\n  }\n\n  const handleReset = () => {\n    setModel('[]');\n  }\n\n  const left = <>\n    {error && <Error message={error}/>}\n    <h5>Fields definition</h5>\n    <Textarea content={model} onChange={handleChange}/>\n    <input type=\"number\" value={n} onChange={handleChangeN}/>\n    <br/>\n    <button className=\"btn btn-primary\" type=\"button\" onClick={convert}>Generate!</button>\n    &nbsp;\n    <button className=\"btn btn-secondary\" type=\"button\" onClick={handleReset}>Reset</button>\n  </>\n\n  const right = output && <>\n    <Code value={output}/>\n    <button className=\"btn btn-secondary\" type=\"button\">Copy</button>\n  </>\n\n  return <Layout.LeftRight title={'Create Mock Data'} left={left} right={right}/>;\n};\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from 'react-router-dom';\n\nimport Layout from './layout';\n\nimport Main from './app';\nimport ValidateSchema from './validation/schema';\nimport OpenAPi from './open-api';\nimport toTS from './model-to-ts';\nimport queryToTS from './query-to-ts';\nimport toJoi from './model-to-ts/joi'\nimport FakeData from './fake-data';\n\nconst NotFound = () => <p>Page Not Found</p>;\n\nfunction Router() {\n  return (<Layout>\n    <Switch>\n      <Route exact path={'/'} component={Main} />\n      <Route exact path={'/validate/schema'} component={ValidateSchema}/>\n      <Route exact path={'/openApi'} component={OpenAPi}/>\n      <Route exact path={'/toTS'} component={toTS}/>\n      <Route exact path={'/queryToTs'} component={queryToTS}/>\n      <Route exact path={'/toJoi'} component={toJoi}/>\n      <Route exact path={'/fake-data'} component={FakeData}/>\n      <Route path=\"/\" component={NotFound} />\n    </Switch>\n  </Layout>);\n}\n\nexport default withRouter(Router);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n\n\nimport { Router } from 'react-router-dom';\nimport * as History from 'history';\n\nimport RouterApp from './router';\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nReactDOM.render(<Router history={history}><RouterApp/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}